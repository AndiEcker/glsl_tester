#: import read_file_text ae.files.read_file_text
# already imported via ae.kivy_sideloading/kv-string: #: import _f_ ae.kivy_file_chooser
#: import _u_ ae.kivy_user_prefs
<Main@BoxLayout>
    orientation: 'vertical'
    BoxLayout:
        size_hint_y: None
        height: app.app_states['font_size'] * 1.5 * (1 + 2 * app.main_app.debug_level)
        spacing: '3sp'
        HelpToggler:
        UserPreferencesButton:
            size_hint_x: None
            width: self.height
        FileChooserButton:
            visible: not tool_box.visible
        RunningShaders:
            spacing: '3sp'
            id: running_shaders
        FlowButton:
            tap_flow_id: id_of_flow('add', 'renderer')
            icon_name: id_of_flow('add', 'item')
            disabled: not app.app_states['next_shader']
            size_hint_x: None
            width: self.height * (2.1 if app.landscape else 1.0)
            relief_ellipse_inner_colors: relief_colors()
            relief_ellipse_inner_lines: int(self.height / 4.5)
            relief_ellipse_inner_offset: int(self.height / 7.5)
        FlowToggler:
            tap_flow_id: id_of_flow('toggle', 'tool_box')
            text: "^" if tool_box.visible else "v"
            size_hint_x: None
            width: self.height
            relief_ellipse_inner_colors: relief_colors()
            relief_ellipse_inner_lines: int(self.height / 3.9)
        SideloadingButton:
            id: sideloading_button
    Widget:
        size_hint_y: None
        height: '6sp'
    BoxLayout:
        id: tool_box
        visible: True
        disabled: not self.visible
        size_hint_y: None
        height:
            round(2.4 * app.app_states['font_size'] + input_values.height + shader_args.minimum_height) \
            if self.visible else 0
        orientation: 'vertical'
        padding: '6sp'
        spacing: '3sp'
        canvas:
            Color:
                rgba: app.font_color[:3] + (0.369 if tool_box.visible else 0.0, )
            RoundedRectangle:
                pos: self.pos
                size: self.size
            Color:
                rgba: app.font_color[:3] + (0.69 if tool_box.visible else 0.0, )
            Line:
                width: sp(0.9)
                rounded_rectangle: self.x + 1, self.y + 1, self.width - 2, self.height - 2, sp(9)
        BoxLayout:
            spacing: '3sp'
            padding: '3sp'
            size_hint_y: None
            height: app.app_states['font_size'] * 1.8 if tool_box.visible else 0.0
            FlowInput:
                background_color: self.background_color[:3] + [1.0 if tool_box.visible else 0.0]
                focus_flow_id: 'shader_filename'
                text: app.app_states['shader_filename']
                on_text: app.main_app.change_app_state('shader_filename', self.text)
                size_hint_y: None
                height: app.app_states['font_size'] * 1.8 if tool_box.visible else 0.0
                auto_complete_texts: file_lines(norm_path("{ado}/ShaderFilenameSuggestions.txt"))
                on_auto_complete_texts:
                    write_file_text(self.auto_complete_texts, norm_path("{ado}/ShaderFilenameSuggestions.txt"))
                on_text: app.main_app.update_shader_file()
            FileChooserButton:
                visible: tool_box.visible
            OptionalButton:
                tap_flow_id: id_of_flow('next', 'render_tick')
                visible:
                    app.app_states['render_frequency'] == app.main_app.get_var('render_frequency_min') \
                    and tool_box.visible
                text: "tick"
                relief_square_inner_colors: relief_colors() if tool_box.visible else ()
                relief_square_inner_lines: int(self.height / 3.9)
        ShaderArgs:
            id: shader_args
        ImageLabel:
            id: input_values
            font_size: app.app_states['font_size'] * 0.9
            size_hint: 1 if tool_box.visible else None, None
            opacity: 1 if tool_box.visible else 0
            text_size: self.width, None
            # or ..height needed for initial redraw (else height is wrong for multiline label text)
            size: self.width if tool_box.visible else 0, self.texture_size[1] or self.height if tool_box.visible else 0
    RenderWidget:
        id: render_widget
        size_hint_y: 1


<RenderWidget@ImageLabel+ShadersMixin>
    on_touch_down:
        if self.collide_point(*args[1].pos): \
        app.main_app.hist_touch.append(app.main_app.last_touch); \
        app.main_app.last_touch = (float(args[1].x), float(args[1].y)); \
        app.main_app.update_input_values()


<FileChooserButton@OptionalButton>
    tap_flow_id: id_of_flow('open', 'file_chooser', 'shader_filename')
    tap_kwargs:
        update_tap_kwargs(self, popup_kwargs=dict(
        initial_path=app.app_states['file_chooser_initial_path'] or norm_path("{ado}") or ".", \
        submit_to='shader_filename', filters=['*.glsl']))
    text: "..."
    size_hint_x: None
    width: self.height
    relief_ellipse_inner_colors: relief_colors()
    relief_ellipse_inner_lines: int(self.height / 3.9)


<ShaderButton>
    tap_flow_id: id_of_flow('del', 'renderer')
    tap_kwargs: dict(big_shader_id=self.big_shader_id)
    size_hint_y: None
    height: self.parent.height if self.parent else self.height
    relief_ellipse_inner_colors: relief_colors()
    relief_ellipse_inner_lines: int(self.height / 3.9)

<RunningShaders@DynamicChildrenBehavior+GridLayout>
    rows: 1
    registered_renderers: []
    child_data_maps:
        [dict(cls='ShaderButton',
        kwargs=dict(text=_("remove"), added_shaders=[dic]),
        attributes=dict(big_shader_id=dic['_shader_id']))
        for dic in self.registered_renderers]
    canvas:


<ShaderArgInput>
    size_hint_y: None
    height: app.main_app.font_size * 1.8 if root.parent and root.parent.parent.visible else 0.0
    visible: bool(root.parent and root.parent.parent.visible)
    ImageLabel:
        font_size: app.app_states['font_size'] * 0.69
        # strange: text is visible in dark mode (even with color.alpha==0), therefore had to set it to empty string
        text: _(app.main_app.shader_arg_alias(root.arg_name)) + ":" if root.visible else ""     # alt: opacity = 0
        text_size: self.width, None
        halign: 'right'
        size_hint_x: 0.39
        height: self.height if root.visible else 0.0
    FlowInput:
        background_color: self.background_color[:3] + [1.0 if root.visible else 0.0]
        focus_flow_id: 'shader_arg_' + root.arg_name
        text: root.arg_name and app.app_states['shader_arg_' + root.arg_name]
        on_text: app.main_app.change_app_state('shader_arg_' + root.arg_name, self.text)
        sug_filename: os.path.join(norm_path("{sug}"), root.arg_name + "ShaderArg.txt")
        auto_complete_texts: file_lines(self.sug_filename)
        on_auto_complete_texts:write_file_text(self.auto_complete_texts, self.sug_filename)

<ShaderArgs@DynamicChildrenBehavior+GridLayout>
    spacing: '9sp'
    padding: '6sp'
    cols: max(1, int(Window.width / (15 * app.main_app.font_size)))
    child_data_maps:
        [dict(cls='ShaderArgInput', kwargs=dict(arg_name=arg)) for arg in app.main_app.shader_arg_names(app.app_states)]


<UserPreferencesPopup>:
    AppStateSlider:
        app_state_name: 'render_frequency'
        cursor_image:
            app.main_app.img_file('timer_frequency', app.app_states['font_size'], app.app_states['light_theme'])
        min: app.main_app.get_var('render_frequency_min')
        max: app.main_app.get_var('render_frequency_max')
