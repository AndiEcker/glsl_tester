// Original shader from: https://www.shadertoy.com/view/Wt3BzM

#ifdef GL_ES
precision mediump float;
#endif

uniform float alpha;
uniform float time;
uniform vec2 resolution;

// shadertoy emulation
#define iTime time
#define iResolution resolution

// --------[ Original ShaderToy begins here ]---------- //
// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// More info here:  http://www.iquilezles.org/www/articles/lyapunovfractals/lyapunovfractals.htm

vec3 calc( in vec2 p )
{
    float x = 0.5;
	float h = 0.0;
	for( int i=0; i<9; i++ )
	{
		x = p.x*x*(1.0-x+sin(iTime)/100.);
        h += log2(abs(p.x*(1.0-2.0*x)));
        
		x = p.x*x*(1.0-x+sin(iTime*2.)/100.);
        h += log2(abs(p.x*(1.0-2.0*x)));
        
		x = p.x*x*(1.0-x);
        h += log2(abs(p.x*(1.0-2.0*x)));
        
		x = p.x*x*(1.0-x);
        h += log2(abs(p.x*(1.0-2.0*x)));

        x = p.y*x*(1.0-x);
        h += log2(abs(p.y*(1.0-2.0*x)));
        
		x = p.y*x*(1.0-x+sin(iTime/2.)/50.);
        h += log2(abs(p.y*(1.0-2.0*x)));
        
		x = p.y*x*(1.0-x);
        h += log2(abs(p.y*(1.0-2.0*x)));
        
		x = p.y*x*(1.0-x+sin(iTime*1.5)/100.);
        h += log2(abs(p.y*(1.0-2.0*x)));
	}
    h /= 290.0;
	
	
	vec3 col = vec3(0.0);
	if( h<0.0 )
	{
		h = abs(h);
		col =  1.0*sin(vec3(0.9,0.5,0.0) + 6.8*h);
	}

	return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec3 col =  calc(vec2(2.2,3.4) + 1.5*(fragCoord) / iResolution.x);
	fragColor = vec4(col, alpha);
}
// --------[ Original ShaderToy ends here ]---------- //

void main(void)
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
