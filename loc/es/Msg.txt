{
#==================================
#---- OVERWRITING ae.gui_help -----
"help_app_state#sound_volume": """\
volumen de sonidos

para silenciar todos los sonidos puntea
a la izquierda.

volumen actual: {round(self.value * 100)}%

Usar la expression
'lambda: main_app.sound_volume'
para cambiar valores del shader.""",
#----------------------------------
#---- OVERWRITING ae.gui_help -----
"help_app_state#vibration_volume": """\
intensidad vibración

para silenciar todos los
vibraciones puntea a la
izquierda.

vibración actual: {round(self.value * 100)}%

usa la expression
'lambda: main_app.vibration_volume'
para cambiar valores del shader.""",
#----------------------------------
#---- OVERWRITING ae.gui_help -----
"help_app_state#render_frequency": """\
ajustar la frequencia de la animación
del shader.

current frequency: {round(self.value)}Hz

moviendolo hacia la izquierda la
animación automatica se desactivará
y aparecerá un botón 'tick' para
avanzar la animación de forma
manualmente.""",
#==================================
"help_flow#add_shader": """\
puntea ese botón para
arrancar un nueva
instancia del shader
cargado.""",
"help_flow#open_file_chooser:shader_filename": """\
puntea para abrir
y cargar un nuevo
fichero de shader.""",
"help_flow#del_shader": """\
puntea para detener
el shader arrancado.""",
"help_flow#shader_arg_alpha": """\
introducir un valor de punto flotante entre
0.0 y 1.0 para el argumento {main_app.get_txt_(self.alias_name)}.

este número esta interpretado por la
mayoria de los shaders como opacidad.

para ajustar ese valor dinamicamente por un
shader arrancado, introduce lo como una
expressión lambda, como por ejemplo
'lambda: main_app.sound_volume' o 's' para
usar el deslizador del volumen ('v' para
aquel de la intensidad de vibración).""",
"help_flow#shader_arg_center_pos": """\
introduzca una lista dos valores de
punto flotante o una expressión de lambda
para especificar el argumento {main_app.get_txt_(self.alias_name)}.

la mayoria de los shaders usa este valor
como posición central (x,y) de la animación.

también se puede usar por ejemplo la
expresión 'main_app.last_touch.pos'.
""",
"help_flow#shader_arg_contrast": """\
introduzca un valor de punto flotante o
una expresión lambda para especificar
el argumento {main_app.get_txt_(self.alias_name)}
del shader.""",
"help_flow#shader_arg_mouse": """\
introduzca una lista dos valores de
punto flotante o una expressión de lambda
para especificar el argumento
{main_app.get_txt_(self.alias_name)}.""",
"help_flow#shader_arg_start_time": """\
introduzca un valor de punto flotante o una
expresión lambda para especificar el argumento
{main_app.get_txt_(self.alias_name)} del shader.

introduzca '0.0' para sincronizar los shaders,
'None' para tener un tiempo propio o 'c' para
detener el temporizador para este shader.""",
"help_flow#shader_arg_tex_col_mix": """\
introduzca un valor de punto flotante o
una expresión lambda para especificar
el argumento {main_app.get_txt_(self.alias_name)}
del shader.""",
"help_flow#shader_arg_tint_ink": """\
introduzca una lista cuatro valores de
punto flotante o una expressión de lambda
para especificar el argumento
{main_app.get_txt_(self.alias_name)}.

usa una de los color del menu de los
preferencias de usuario, por ejemplo
el Color 1 en una expresión de lambda
como 'lambda: main_app.flow_id_ink'.

el Color 2 es representado como
'flow_path_ink',
el Color 3 como 'selected_item_ink' y
el Color 4 como 'unselected_item_ink'.""",
"help_flow#shader_filename": """\
introduzca la ruta del fichero del
shader que quieres arrancar o puntea
el botón ... a la derecha para
seleccionarlo.""",
"help_flow#next_render_tick": """\
puntea para avanzar la animación
del shader por un tick.""",
"help_flow#toggle_tool_box": """\
puntea para {'abrir' if self.state == 'down' else 'cerrar'} la
ventanita para introducir los
valores/argumentos del shader.""",
#==================================
#---- OVERWRITING ae.gui_help -----
"flow_id_ink": "Color 1{' (main_app.flow_id_ink)' if app.landscape else ''}",
"flow_path_ink": "Color 2{' (main_app.flow_path_ink)' if app.landscape else ''}",
"selected_item_ink": "Color 3{' (main_app.selected_item_ink)' if app.landscape else ''}",
"unselected_item_ink": "Color 4{' (main_app.unselected_item_ink)' if app.landscape else ''}",
#----------------------------------
"shader {self.shaders_idx} error(s)":
    {'one': "error en el shader {self.shaders_idx}",
     'many': "{count} errores en el shader {self.shaders_idx}"},
"alpha": "opacidad",
"animation exception - stopped timer": "error de animación - temporizador suspendido",
"center_pos": "pos. central",
"contrast": "contraste",
"empty shader code file {shader_filename}": "fichero de shader {shader_filename} es vacio",
"{file_path} is not a shader file": "{file_path} no es un fichero de código de shader",
"invalid expression '{arg_inp}' in shader argument [b]{main_app.get_txt_(arg_name)}[/b]":
    "la expresión de '{arg_inp}' del argumento [b]{main_app.get_txt_(arg_name)}[/b] no es válida",
"missing shader argument app state [b]{main_app.get_txt_(arg_name)}[/b]'":
    "el valor del argumento [b]{main_app.get_txt_(arg_name)}[/b] no existe",
"mouse": "pos. ratón",
"no vertex/fragment sections in shader {shader_filename}":
    "faltan los secciones de vertex/fragment en {shader_filename}",
"shader compilation/start failed: {ex}": "error '{ex}' en arrancar el shader",
"shader file {shader_filename} not found": "el fichero de shader {shader_filename} no existe",
"tint_ink": "color",
}
