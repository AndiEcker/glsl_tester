{
#==================================
#---- OVERWRITING ae.gui_help -----
"help_app_state#sound_volume": """\
lautstärke ändern.

tippe ganz links um akustische
signale zu unterdrücken.

aktuelle lautstärke: [b]{round(self.value * 100)}[/b]%

als 'lambda: gt_app.sound_volume'
ausdruck (oder kurz 's') zum
dynamischen ändern von shader
argumenten verwendbar.""",
#----------------------------------
#---- OVERWRITING ae.gui_help -----
"help_app_state#vibration_volume": """\
intensität vibrationen

tippe ganz links um alle vibrationen
zu unterdrücken.

aktuelle vibration: [b]{round(self.value * 100)}[/b]%

als 'lambda: gt_app.vibration_volume'
ausdruck (oder kurz 'v') zum dynamischen
ändern von shader argumenten verwendbar.""",
#----------------------------------
#---- OVERWRITING ae.gui_help -----
"help_app_state#render_frequency": """\
animations-frequenz des shader-zeitgebers.

aktuelle frequenz: [b]{round(self.value)}[/b]Hz

schiebe den regler ganz nach links um den
shader-zeitgeber zu deaktivieren und um
den [b]tick[/b]-knopf anzuzeigen, mit dem
die shader-animation manuel um eine
zeit-einheit weiterbewegt werden kann.""",
#==================================
"help_flow#add_shader": """\
erstellt eine neue instanz
des gerade zur bearbeitung
ausgewählten shaders [b]{main_app.shaders_idx}[/b].""",
#----------------------------------
"help_flow#del_shader": """\
entfernt den gerade zur
bearbeitung gewählten
shader [b]{main_app.shaders_idx}[/b].""",
#----------------------------------
"help_flow#open_file_chooser:shader_filename": """\
öffnet das datei-auswahl-fenster
zur auswahl einer neuen datei
für shader [b]{main_app.shaders_idx}[/b].""",
#----------------------------------
"help_flow#run_shader": """\
shader [b]{main_app.shaders_idx}[/b]
{"stoppen" if main_app.shaders_args[main_app.shaders_idx]['run_state'] == 'running' else "starten"}.""",
#----------------------------------
"help_flow#sel_shader": """\
shader [b]{self.text.split('==')[0]}[/b] zur bearbeitung
auswählen.

der knopf des zur bearbeitung
ausgewählten shaders wird in
doppelter breite angezeigt.{'''
(dieser shader ist bereits
ausgewählt)''' if main_app.shaders_idx == int(self.text.split('==')[0]) else ""}""",
#----------------------------------
"help_flow#edit_shader_arg:alpha": """\
gebe einen numerischen wert zwischen 0.0
und 1.0 für das [b]{main_app.get_txt_(self.alias_name)}[/b]
shader argument ein. Dieser wert beeinflusst
die transparenz der shader-ausgabe.

um diesen wert beim start eines shaders zu
setzen kann einer der schieberegler im
zahnrad-menü verwendet werden: der wert des
lautstärke-regler entspricht z.B. dem
ausdruck 'gt_app.sound_volume', und
'gt_app.vibration_volume' entspricht der
aktuellen vibrations-intensität.

mit der zeichenkette 'lambda: ' am
anfang kann der wert auch im laufenden
shader dynamisch geändert werden. Die
eingabe 'lambda: gt_app.sound_volume'
oder kurz 's' macht z.B. den lautstärke-
regler zum dynamischen shader-eingabe-wert
(die vibrations-intensität via 'v').""",
#----------------------------------
"help_flow#edit_shader_arg:center_pos": """\
gebe zwei komma-werte (z.B. '100.0, 200.0') oder
einen lambda-ausdruck für das shader argument
[b]{main_app.get_txt_(self.alias_name)}[/b] ein.

lambda-ausdrücke wie 'lambda: gt_app.last_touch'
(kurz 'L'), 'lambda: gt_app.mouse_pos' (kurz 'M'),
oder 'C' (für die zentral-position des render
widgets) aktualisieren dieses argument dynamisch.

der folgende lambda-ausdruck kombiniert z.B. den
zeitgeber ('T') mit 'C' um die zentral-position
des laufenden shaders dynamisch kreisen zu lassen:
'lambda: (C()[0]+sin(T())*90,C()[1]-cos(T())*60)'""",
#----------------------------------
"help_flow#edit_shader_arg:contrast": """\
gebe einen numerischen komma-wert
oder einen lambda-ausdruck ein um
das [b]{main_app.get_txt_(self.alias_name)}[/b] shader
argument zu setzen.""",
#----------------------------------
"help_flow#edit_shader_arg:mouse": """\
diese eingabe repräsentiert, ähnlich
beim shader argument [b]{main_app.get_txt_('center_pos')}[/b],
eine bildschirm-position (x, y).

gebe entweder zwei komma-werte oder
einen lambda-ausdruck ein um das
[b]{main_app.get_txt_(self.alias_name)}[/b] shader argument
zu setzen.""",
#----------------------------------
"help_flow#edit_shader_arg:start_time": """\
[b]{main_app.get_txt_(self.alias_name)}[/b] in sekunden
als komma-wert oder einen lambda-ausdruck.

ein komma-wert bewirkt einen versatz zum
shader-zeitgeber. 0.0 synchronisiert den
shader-zeitgeber. bei einem lambda-ausdruck
wie 'lambda: T() * 2.0' läuft er rückwärts.

'T' repräsentiert den wert des laufenden
zeitgebers (Clock.get_boottime()).""",
#----------------------------------
"help_flow#edit_shader_arg:tex_col_mix": """\
gebe einen komma-wert oder
einen lambda-ausdruck für
das [b]{main_app.get_txt_(self.alias_name)}[/b]
shader argument ein.""",
#----------------------------------
"help_flow#edit_shader_arg:tint_ink": """\
das [b]{main_app.get_txt_(self.alias_name)}[/b] shader argument
repräsentiert eine farbe bestehend aus
vier komma-werten (rot, grün, blau
und alpha) zwischen 0.0 and 1.0.

verwende eine der farben des zahnrad-
menüs. Die mit 'Farbe 1' bezeichnete
farbe entspricht dabei dem ausdruck
'gt_app.flow_id_ink'.
'Farbe 2' entspricht 'gt_app.flow_path_ink',
'Farbe 3' 'gt_app.selected_item_ink' und
'Farbe 4' 'gt_app.unselected_item_ink'.

zur dynamischen änderung im laufenden shader
stelle dem eingegebenen ausdruck die
zeichenfolge 'lambda: ' voraus.""",
#----------------------------------
"help_flow#edit_shader_arg:shader_filename": """\
pfad der shader-datei eingeben oder
auf den [b]...[/b]-knopf links daneben
tippen um eine datei auszuwählen.""",
#----------------------------------
"help_flow#next_render_tick": """\
die shader-animation manuell auf
den nächsten wert zu setzen.

(dieser knopf ist nur sichtbar bei
deaktiviertem shader-zeitgeber)""",
#----------------------------------
"help_flow#toggle_tool_box": """\
fenster zur eingabe und bearbeitung
der shader argumente {'öffnen' if self.state == 'down' else 'schließen'}.""",
#==================================
'tour_page#gt_screen_layout':
    {'fade_out_app': 0.111,
     'page_text': """\
teste glsl shader-dateien mit dynamischen argumenten.

oben werden shader-dateien und argumente angegeben.
die shader-ausgabe füllt den rest dieses fensters.""", },
#----------------------------------
'tour_page#gt_choose_shader_file':
    {'page_text': "shader-datei wählen",
     'tip_text': "=edit_shader_arg:shader_filename", },
#----------------------------------
'tour_page#gt_run_pause_shader':
    {'page_text': "shader starten/pausieren",
     'tip_text': """\
dieser knopf startet/pausiert den zur
bearbeitung ausgewählten shader.""", },
#----------------------------------
'tour_page#gt_enter_shader_args':
    {'fade_out_app': 0.3,
     'page_text': """\
die argumente der [b]uniform[/b]-parameter der
gewählten shader-datei werden in den nun
hervorgehobenen eingabe-feldern angegeben.""", },
#----------------------------------
'tour_page#gt_pos_shader_arg':
    {'fade_out_app': 0.21,
     'page_text': "dynamische zentral-position",
     'tip_text': "=edit_shader_arg:center_pos", },
#----------------------------------
'tour_page#gt_shader_slots':
    {'page_text': "shader wählen",
     'tip_text': """\
jeder dieser ovalen knöpfe repräsentiert einen
shader. ein tip auf einen der knöpfe wählt den
shader aus, um die zugehörigen shader-argumente
anzuzeigen und zu ändern.

der status jedes shaders ist im knopf-text nach
den beiden [b]==[/b]-zeichen zu sehen.""", },
#----------------------------------
'tour_page#gt_add_del_shader':
    {'fade_out_app': 0.6,
     'page_text': "shader hinzufügen/löschen",
     'tip_text': """\
der knopf des gerade gewählte shaders wird in doppelter
breite angezeigt. mit dem [b]+[/b]-knopf links wird er
dupliziert. mit dem knopf darunter wird er gelöscht.""", },
#----------------------------------
'tour_page#gt_multiple_shaders':
    {'fade_out_app': 0.0,
     'tip_text': """\
setze zur kombination mehrerer shader (hier 3) die
[b]opazität[/b] argumente auf werte kleiner als 1.0.""", },
#==================================
#---- OVERWRITING ae.gui_help -----
"flow_id_ink": "farbe 1{' (gt_app.flow_id_ink)' if app.landscape else ''}",
"flow_path_ink": "farbe 2{' (gt_app.flow_path_ink)' if app.landscape else ''}",
"selected_item_ink": "farbe 3{' (gt_app.selected_item_ink)' if app.landscape else ''}",
"unselected_item_ink": "farbe 4{' (gt_app.unselected_item_ink)' if app.landscape else ''}",
#----------------------------------
"alpha": "opazität",
"animation exception - stopped timer": "animationsfehler - zeitgeber angehalten",
"center_pos": "zentral-pos.",
"contrast": "kontrast",
"empty shader code file {shader_filename}": "shader-datei {shader_filename} ist leer",
"{file_path} is not a shader file": "{file_path} ist keine shader-datei",
"invalid expression '{arg_inp}' in shader argument [b]{gt_app.get_txt_(arg_name)}[/b]":
    "der ausdruck '{arg_inp}' der input variable [b]{gt_app.get_txt_(arg_name)}[/b] ist fehlerhaft",
"missing shader argument app state [b]{gt_app.get_txt_(arg_name)}[/b]":
    "shader parameter [b]{gt_app.get_txt_(arg_name)}[/b] ist ungültig",
"mouse": "maus-pos.",
"no vertex/fragment sections in shader {shader_filename}":
    "vertex/fragment abschnitte fehlen im shader {shader_filename}",
"paused": "pausiert",
"run": "start",
"running": "läuft",
"shader compilation/start failed: {ex}": "shader-start-fehler: {ex}",
"shader {self.shaders_idx} error(s)":
    """{str(count) + " " if count > 1 else ""}fehler in shader {self.shaders_idx}""",
"shader file {shader_filename} not found": "shader-datei {shader_filename} existiert nicht",
"tint_ink": "farbe",
}
