{
#==================================
#---- OVERWRITING ae.gui_help -----
"help_app_state#sound_volume": """\
lautstärke ändern.

tippe ganz links um akustische
signale zu unterdrücken.

aktuelle lautstärke: [b]{round(self.value * 100)}[/b]%

als 'lambda: main_app.sound_volume'
ausdruck (oder kurz 's') zum
dynamischen ändern von shader
argumenten verwendbar.""",
#----------------------------------
#---- OVERWRITING ae.gui_help -----
"help_app_state#vibration_volume": """\
intensität vibrationen

tippe ganz links um alle vibrationen
zu unterdrücken.

aktuelle vibration: [b]{round(self.value * 100)}[/b]%

als 'lambda: main_app.vibration_volume'
ausdruck (oder kurz 'v') zum dynamischen
ändern von shader argumenten verwendbar.""",
#----------------------------------
"help_app_state#render_frequency": """\
animations-frequenz des shader-zeitgebers.

aktuelle frequenz: [b]{round(self.value)}[/b]Hz

schiebe den regler ganz nach links um den
shader-zeitgeber zu deativieren und um
den [b]tick[/b]-knopf anzuzeigen, mit dem
die shader-animation manuel um eine
zeit-einheit weiterbewegt werden kann.""",
#==================================
"help_flow#add_shader": """\
erstellt eine neue instanz
des gerade zur bearbeitung
ausgewählten shaders [b]{main_app.shaders_idx}[/b].""",
#----------------------------------
"help_flow#del_shader": """\
entfernt den gerade zur
bearbeitung gewählten
shader [b]{main_app.shaders_idx}[/b].""",
#----------------------------------
"help_flow#open_file_chooser:shader_filename": """\
öffnet das datei-auswahl-fenster
zur auswahl einer neuen datei
für shader [b]{main_app.shaders_idx}[/b].""",
#----------------------------------
"help_flow#run_shader": """\
shader [b]{main_app.shaders_idx}[/b]
{"stoppen" if main_app.shaders_args[main_app.shaders_idx]['run_state'] == 'running' else "starten"}.""",
#----------------------------------
"help_flow#sel_shader": """\
shader [b]{self.text.split('==')[0]}[/b] zur bearbeitung
auswählen.

der knopf des zur bearbeitung
ausgewählten shaders wird in
doppelter breite angezeigt.{'''
(dieser shader ist bereits
ausgewählt)''' if main_app.shaders_idx == int(self.text.split('==')[0]) else ""}""",
#----------------------------------
"help_flow#shader_arg_alpha": """\
gebe einen numerischen wert zwischen '0.0'
und '1.0' für das [b]{main_app.get_txt_(self.alias_name)}[/b]
shader argument ein. Dieser wert beeinflusst
die transparenz der shader-ausgabe.

um diesen wert beim start eines shaders zu
setzen kann einer der schieberegler im
zahnrad-menü verwendet werden: der wert des
lautstärke-regler entspricht z.B. dem
ausdruck 'main_app.sound_volume', und
'main_app.vibration_volume' entspricht der
aktuellen vibrations-intensität.

mit der zeichenkette 'lambda: ' am
anfang kann der wert auch im laufenden
shader dynamisch geändert werden. Die
eingabe 'lambda: main_app.sound_volume'
oder kurz 's' macht z.B. den lautstärke-
regler zum dynamischen shader-eingabe-wert
(die vibrations-intensität via 'v').""",
#----------------------------------
"help_flow#shader_arg_center_pos": """\
gebe zwei komma-werte (z.B. '100.0, 200.0')
oder einen lambda-ausdruck für das
[b]{main_app.get_txt_(self.alias_name)}[/b] shader argument ein.

die meisten shader nutzen dieses
argument als zentrale bildschirm-
position (x,y) der animation.

die ausdrücke 'main_app.last_touch'
(kurz 'T') oder 'main_app.mouse_pos'
(kurz 'M') können verwendet werden um
dieses shader argument dynamisch - im
laufenden shader - zu ändern.""",
#----------------------------------
"help_flow#shader_arg_contrast": """\
gebe einen numerischen komma-wert
oder einen lambda-ausdruck ein um
das [b]{main_app.get_txt_(self.alias_name)}[/b] shader
argument zu setzen.""",
#----------------------------------
"help_flow#shader_arg_mouse": """\
diese eingabe repräsentiert, ähnlich
beim shader argument [b]{main_app.get_txt_('center_pos')}[/b],
eine bildschirm-position (x, y).

gebe entweder zwei komma-werte oder
einen lambda-ausdruck ein um das
[b]{main_app.get_txt_(self.alias_name)}[/b] shader argument
zu setzen.""",
#----------------------------------
"help_flow#shader_arg_start_time": """\
[b]{main_app.get_txt_(self.alias_name)}[/b] in sekunden
als komma-wert oder einen lambda-ausdruck.

ein komma-wert bewirkt einen versatz zum
shader-zeitgeber. '0.0' synchronisiert den
shader-zeitgeber.

bei eingabe eines lambda-ausdruck wie z.b.
'lambda: c() * 2.0' läuft die animation
des shaders rückwärts.

'c' repräsentiert den wert des laufenden
zeitgebers (Clock.get_boottime()).""",
#----------------------------------
"help_flow#shader_arg_tex_col_mix": """\
gebe einen komma-wert oder
einen lambda-ausdruck für
das [b]{main_app.get_txt_(self.alias_name)}[/b]
shader argument ein.""",
#----------------------------------
"help_flow#shader_arg_tint_ink": """\
das [b]{main_app.get_txt_(self.alias_name)}[/b] shader argument
repräsentiert eine farbe bestehend aus
vier komma-werten (rot, grün, blau
und alpha) zwischen 0.0 and 1.0.

verwende eine der farben des zahnrad-
menüs. Die mit 'Farbe 1' bezeichnete
farbe entspricht dabei dem ausdruck
'main_app.flow_id_ink'.
'Farbe 2' entspricht 'main_app.flow_path_ink',
'Farbe 3' 'main_app.selected_item_ink' und
'Farbe 4' 'main_app.unselected_item_ink'.

zur dynamischen änderung im laufenden shader
stelle dem eingegebenen ausdruck die
zeichenfolge 'lambda: ' voraus.""",
#----------------------------------
"help_flow#shader_filename": """\
pfad der shader-datei eingeben oder
auf die [b]...[/b]-schaltfläche links
daneben tippen um eine shader-datei
auszuwählen.""",
#----------------------------------
"help_flow#next_render_tick": """\
die shader-animation manuell auf
den nächsten wert zu setzen.

(dieser knopf ist nur sichtbar bei
deaktiviertem shader-zeitgeber)""",
#----------------------------------
"help_flow#toggle_tool_box": """\
fenster zur eingabe und bearbeitung
der shader argumente {'öffnen' if self.state == 'down' else 'schließen'}.""",
#==================================
#---- OVERWRITING ae.gui_help -----
"flow_id_ink": "farbe 1{' (main_app.flow_id_ink)' if app.landscape else ''}",
"flow_path_ink": "farbe 2{' (main_app.flow_path_ink)' if app.landscape else ''}",
"selected_item_ink": "farbe 3{' (main_app.selected_item_ink)' if app.landscape else ''}",
"unselected_item_ink": "farbe 4{' (main_app.unselected_item_ink)' if app.landscape else ''}",
#----------------------------------
"shader {self.shaders_idx} error(s)":
    """{str(count) + " " if count > 1 else ""}fehler in shader {self.shaders_idx}""",
"alpha": "opazität",
"animation exception - stopped timer": "animationsfehler - zeitgeber angehalten",
"center_pos": "zentral-pos.",
"contrast": "kontrast",
"empty shader code file {shader_filename}": "shader-datei {shader_filename} ist leer",
"{file_path} is not a shader file": "{file_path} ist keine shader-datei",
"invalid expression '{arg_inp}' in shader argument [b]{main_app.get_txt_(arg_name)}[/b]":
    "der ausdruck '{arg_inp}' der input variable [b]{main_app.get_txt_(arg_name)}[/b] ist fehlerhaft",
"missing shader argument app state [b]{main_app.get_txt_(arg_name)}[/b]":
    "shader parameter [b]{main_app.get_txt_(arg_name)}[/b] ist ungültig",
"mouse": "maus-pos.",
"no vertex/fragment sections in shader {shader_filename}":
    "vertex/fragment abschnitte fehlen im shader {shader_filename}",
"paused": "gestoppt",
"run": "lauf",
"running": "läuft",
"shader compilation/start failed: {ex}": "shader-start-fehler: {ex}",
"shader file {shader_filename} not found": "shader-datei {shader_filename} existiert nicht",
"tint_ink": "farbe",
}
